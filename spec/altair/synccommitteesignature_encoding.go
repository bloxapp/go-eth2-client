// Code generated by fastssz. DO NOT EDIT.
package altair

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SyncCommitteeSignature object
func (s *SyncCommitteeSignature) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SyncCommitteeSignature object to a target array
func (s *SyncCommitteeSignature) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(s.Slot))

	// Field (1) 'BeaconBlockRoot'
	dst = append(dst, s.BeaconBlockRoot[:]...)

	// Field (2) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(s.ValidatorIndex))

	// Field (3) 'Signature'
	dst = append(dst, s.Signature[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the SyncCommitteeSignature object
func (s *SyncCommitteeSignature) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 144 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	s.Slot = Slot(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'BeaconBlockRoot'
	copy(s.BeaconBlockRoot[:], buf[8:40])

	// Field (2) 'ValidatorIndex'
	s.ValidatorIndex = ValidatorIndex(ssz.UnmarshallUint64(buf[40:48]))

	// Field (3) 'Signature'
	copy(s.Signature[:], buf[48:144])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SyncCommitteeSignature object
func (s *SyncCommitteeSignature) SizeSSZ() (size int) {
	size = 144
	return
}

// HashTreeRoot ssz hashes the SyncCommitteeSignature object
func (s *SyncCommitteeSignature) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SyncCommitteeSignature object with a hasher
func (s *SyncCommitteeSignature) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(uint64(s.Slot))

	// Field (1) 'BeaconBlockRoot'
	hh.PutBytes(s.BeaconBlockRoot[:])

	// Field (2) 'ValidatorIndex'
	hh.PutUint64(uint64(s.ValidatorIndex))

	// Field (3) 'Signature'
	hh.PutBytes(s.Signature[:])

	hh.Merkleize(indx)
	return
}
